{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hello you!","text":"<p>Welcome \ud83d\udc4b to my cheat sheets page. Here you will find unstructured, partly bad or outdated but nevertheless helpful cheatsheets that I have written for tutorials and books. These cheatsheets are primarily for personal use, so they are not always understandable. If you have any questions, you can contact gall.dev@proton.me. Please note that all cheatsheets in the category \"Dangerous &amp; Outdated\" do not receive support.</p> <p>Your Leo!</p>"},{"location":"dangerous-outdated/basics-of-symfony/","title":"Basics of Symfony","text":""},{"location":"dangerous-outdated/basics-of-symfony/#installation","title":"Installation","text":"<p>This guide to installing Symfony requires Docker and DDEV.</p> <pre><code>mkdir &lt;project&gt;\ncd &lt;project&gt;\n</code></pre> <p>2. Step: Initialize the DDEV project (select <code>public</code> for docroot location):</p> <pre><code>mkdir &lt;project&gt;\n</code></pre> <p>3. Step: Change the DDEV PHP version to the newest stable PHP build:</p> <pre><code>nano .ddev/config.yaml\n</code></pre> <p>4. Step: Cleaning up:</p> <pre><code>ddev config global --required-docker-compose-version=\"\" --use-docker-compose-from-path=false\n</code></pre> <pre><code>sudo docker system prune --all --force\n</code></pre> <pre><code>sudo docker volume prune --force\n</code></pre> <p>5. Step: Starting DDEV:</p> <pre><code>ddev start\n</code></pre> <p>6. Step: Installing Symfony:</p> <pre><code>ddev composer create symfony/skeleton\nddev composer require twig\n</code></pre>"},{"location":"dangerous-outdated/basics-of-symfony/#project-structure","title":"Project Structure","text":"<p>In a Symfony project, there are several standard folders, each serving specific purposes:</p> <ul> <li> <p><code>bin/</code>: Contains executable files, such as the Symfony console application (<code>bin/console</code>).</p> </li> <li> <p><code>config/</code>: Houses the configuration files for the application, where various settings are defined.</p> </li> <li> <p><code>src/</code>: This is where the PHP code of the project resides, including controllers, services, and other application logic.</p> </li> <li> <p><code>public/</code>: The web root directory, containing publicly accessible files like images, stylesheets, and JavaScript. It also includes the <code>index.php</code>, which acts as the front controller.</p> </li> <li> <p><code>var/</code>: Used for generated files such as cache and logs.</p> </li> <li> <p><code>vendor/</code>: Contains third-party dependencies managed by Composer. This folder should not be manually modified.</p> </li> <li> <p><code>tests/</code>: Holds automated tests for the application, including unit tests.</p> </li> </ul> <p>This structure helps keep the code organized and improves the maintainability of the application.</p>"},{"location":"dangerous-outdated/basics-of-symfony/#controller","title":"Controller","text":"<p>A controller in Symfony is a PHP class responsible for handling HTTP requests and returning HTTP responses based on the application's logic.</p> <pre><code>// Define the IndexController class.\n// This is a controller that will handle certain HTTP requests.\nclass IndexController {\n\n    // Use the Route annotation to map the root URL (/) to this method.\n    // The 'name' attribute gives this route a name, 'index', which can be used in the application.\n    #[Route(path: '/', name: 'index')]\n    public function indexAction(): Response {\n\n        // Return a new Response object with the text \"Hallo Welt!\".\n        // This text will be sent back to the user's browser when they visit the root URL.\n        return new Response(\"Hallo Welt!\");\n    }\n}\n</code></pre>"},{"location":"dangerous-outdated/basics-of-symfony/#templates","title":"Templates","text":"<p>To render a template, our controller must inherit from <code>AbstractController</code>. An <code>AbstractController</code> can use the <code>render</code> method:</p> <pre><code>&lt;?php\n\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\n\n\nclass IndexController extends AbstractController {\n\n    #[Route(path: '/', name: 'index')]\n    public function indexAction(): Response {\n\n        return $this-&gt;render('index.html.twig');\n    }\n}\n\n?&gt;\n</code></pre>"},{"location":"dangerous-outdated/basics-of-symfony/#installing-tailwind","title":"Installing Tailwind","text":"<p>1. Step: Install the Tailwind Bundle:</p> <pre><code>composer require symfonycasts/tailwind-bundle\n</code></pre> <p>2. Step: Initialize Tailwind:</p> <pre><code>php bin/console tailwind:init\n</code></pre> <p>3. Step: Build and Watch for Changes (must be executed on every DDEV startup):</p> <pre><code>php bin/console tailwind:build --watch\n</code></pre>"},{"location":"dangerous-outdated/basics-of-symfony/#csrf","title":"CSRF","text":"<p>Before we can use forms, we have to install <code>Security-CSRF</code> first:</p> <pre><code>ddev composer require symfony/security-csrf\n</code></pre>"},{"location":"dangerous-outdated/basics-of-symfony/#csrf-in-forms","title":"CSRF in Forms","text":""},{"location":"dangerous-outdated/basics-of-symfony/#forms","title":"Forms","text":"<p>Symfony Forms provide a robust framework for building, processing, and validating forms in PHP applications, streamlining user input handling. Before we can use forms, we have to install <code>Forms</code> first:</p> <pre><code>ddev composer require symfony/form\n</code></pre> <p>By convention, forms are created in <code>src/Form/Type</code>.</p> <pre><code>&lt;?php\n\nnamespace App\\Form\\Type;\n\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\EmailType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\nuse App\\Entity\\GuestBookEntity;\n\nclass GuestBookType extends AbstractType\n{\n    // This method is where you define the fields that will appear in your form\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder-&gt;add('username', TextType::class, ['empty_data' =&gt; '']);\n        $builder-&gt;add('email', EmailType::class, ['required' =&gt; false]);\n        $builder-&gt;add('subtitle', TextType::class, ['empty_data' =&gt; '']);\n        $builder-&gt;add('body', TextType::class, ['empty_data' =&gt; '']);\n        $builder-&gt;add('submit', SubmitType::class);\n    }\n\n    // This method is where you define options for the form, such as the data class (database model) it maps to\n    public function configureOptions(OptionsResolver $resolver)\n    {\n        $resolver-&gt;setDefaults([\n            'data_class' =&gt; GuestBookEntity::class\n        ]);\n    }\n}\n</code></pre> <p> To render a form, you have to submit the form in the context while loading the template:</p> <pre><code>$form = $this-&gt;createForm(GuestBookType::class);\n\nreturn $this-&gt;render('index.html.twig', [\n    'form' =&gt; $form\n]);\n</code></pre> <p>It is integrated into the template with the <code>{{ form(form) }}</code> template snippet.</p> <p></p> <p>You can add HTML attributes to the form elements by adding them in <code>$options</code>:</p> <pre><code>$builder-&gt;add('username', TextType::class, ['empty_data' =&gt; '', 'attr' =&gt; ['class' =&gt; 'block']]);\n</code></pre> <p></p> <p>You can use predefined stylings by adding them into <code>config/packages/twig.yaml</code>:</p> <pre><code>twig:\n  file_name_pattern: \"*.twig\"\n  form_themes: [\"tailwind_2_layout.html.twig\"]\n</code></pre> <p></p> <p>The data transmitted by the form is obtained by handling the controller's request in the form. You can then call the getData method on the form.</p> <pre><code>&lt;?php\n\nnamespace App\\Controller;\n\nuse App\\Form\\Type\\GuestBookType;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\nclass IndexController extends AbstractController\n{\n\n    #[Route(path: '/', name: 'index')]\n    public function indexAction(Request $request): Response\n    {\n\n        $form = $this-&gt;createForm(GuestBookType::class);\n        $form-&gt;handleRequest($request);\n\n        if ($form-&gt;isSubmitted()) {\n            $data = $form-&gt;getData();\n            dd($data);\n        }\n\n        return $this-&gt;render('index.html.twig', [\n            'form' =&gt; $form\n        ]);\n    }\n}\n</code></pre>"},{"location":"dangerous-outdated/basics-of-symfony/#entities-databases","title":"Entities &amp; Databases","text":"<p>Entities are PHP classes that typically correspond to tables in a database. Each property of the class maps to a column in the table. Doctrine handles the persistence of these objects, meaning it automatically handles saving and retrieving data from the database.  By convention, entities are created in <code>src/Entity</code>.</p> <pre><code>&lt;?php\n\nnamespace App\\Entity;\n\nuse DateTimeImmutable;\n\nclass GuestBookEntity\n{\n    private ?int $id;                  // Unique identifier (primary key)\n    private DateTimeImmutable $createdAt; // Timestamp for when the entry was created\n    private string $username;          // Name of the user making the entry\n    private string $subtitle;          // Subtitle or title of the entry\n    private string $body;              // Main content of the entry\n    private ?string $email;            // Optional email address of the user\n\n    public function __construct()\n    {\n        $this-&gt;createdAt = new DateTimeImmutable(); // Set creation time\n    }\n\n    // Getters and setters for each property...\n}\n</code></pre> <p></p> <p>Forms can be validated using entities. For this you need the <code>Validator</code> package:</p> <pre><code>ddev composer require symfony/validator\n</code></pre> <p>This is done via constraints and asserts.</p> <pre><code>use Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass GuestBookEntity\n{\n    private ?int $id;\n    private \\DateTimeImmutable $createdAt;\n\n    #[Assert\\NotBlank]\n    #[Assert\\Length(max: 255)]\n    private string $username;\n}\n</code></pre> <p></p> <p>Before we can use databases, we have to install the <code>ORM-Pack</code> (<code>Doctrine</code>) and the <code>Maker-Bundle</code> (optional, just for development):</p> <pre><code>ddev composer require symfony/orm-pack\n</code></pre> <pre><code>ddev composer require --dev symfony/maker-bundle\n</code></pre> <p>Im Anschluss muss man innerhalb der Entity die verschiedenen Columns annotieren sowie die Entity als Modell annotieren:</p> <pre><code>use Doctrine\\ORM\\Mapping as ORM;\n\n#[ORM\\Entity]\nclass GuestBookEntity\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id;\n\n    #[ORM\\Column(type: 'datetime_immutable', options: ['default' =&gt; 'CURRENT_TIMESTAMP'])]\n    private \\DateTimeImmutable $createdAt;\n\n    #[Assert\\NotBlank]\n    #[Assert\\Length(max: 255)]\n    #[ORM\\Column(type: 'string')]\n    private string $username;\n\n    #[Assert\\NotBlank]\n    #[Assert\\Length(max: 255)]\n    #[ORM\\Column(type: 'string')]\n    private string $subtitle;\n\n    #[Assert\\NotBlank]\n    #[ORM\\Column(type: 'text')]\n    private string $body;\n\n    #[Assert\\Email]\n    #[ORM\\Column(type: 'string', nullable: true)]\n    private ?string $email;\n}\n</code></pre> <p>To create the migration we have to execute:</p> <pre><code>ddev exec bin/console make:migration\n</code></pre> <pre><code>ddev exec bin/console doctrine:migrations:migrate\n</code></pre> <p>To save the form we need to hand over a readonly <code>EntityManagerInterface</code> to the constructor:</p> <pre><code>&lt;?php\n\nnamespace App\\Controller;\n\nuse App\\Form\\Type\\GuestBookType;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nclass IndexController extends AbstractController\n{\n\n    public function __construct(private readonly EntityManagerInterface $em)\n    {\n\n    }\n\n    #[Route(path: '/', name: 'index')]\n    public function indexAction(Request $request): Response\n    {\n\n        $form = $this-&gt;createForm(GuestBookType::class);\n        # TODO: Request wird gehandled\n        $form-&gt;handleRequest($request);\n\n        # TODO: Form-Daten erhalten\n        if ($form-&gt;isSubmitted()) {\n            $data = $form-&gt;getData();\n            $this-&gt;em-&gt;persist($data);\n            $this-&gt;em-&gt;flush();\n            return $this-&gt;redirectToRoute('index');\n        }\n\n\n\n        return $this-&gt;render('index.html.twig', [\n            'form' =&gt; $form\n        ]);\n    }\n}\n</code></pre> <p>By using the <code>EntityManagerServer</code> we can obtain all entries in the table.</p> <pre><code>$repository = $this-&gt;em-&gt;getRepository(GuestBookEntity::class);\n$entries = $repository-&gt;findBy([], ['createdAt' =&gt; 'DESC']);\n</code></pre>"},{"location":"dangerous-outdated/basics-of-symfony/#repositories","title":"Repositories","text":"<p>In Symfony, a repository is a design pattern used in conjunction with the Doctrine ORM to manage database interactions for a specific entity. Each entity typically has its own repository, which acts as an interface for accessing and manipulating data related to that entity.  An example for a repository looks like this:</p> <pre><code>&lt;?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\GuestBookEntity;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\nclass GuestBookRepository extends ServiceEntityRepository {\n    public function __construct(private readonly ManagerRegistry $registry)\n    {\n        parent::__construct($this-&gt;registry, GuestBookEntity::class);\n    }\n\n    public function add(GuestBookEntity $guestBookEntity) {\n        $manager = $this-&gt;getEntityManager();\n        $manager-&gt;persist($guestBookEntity);\n    }\n\n    public function flush() {\n        $this-&gt;getEntityManager()-&gt;flush();\n    }\n}\n\n?&gt;\n</code></pre> <p>And can be used like this:</p> <pre><code>class IndexController extends AbstractController\n{\n\n    public function __construct(private readonly GuestBookRepository $repository)\n    {\n\n    }\n\n    #[Route(path: '/', name: 'index')]\n    public function indexAction(Request $request): Response\n    {\n\n        $form = $this-&gt;createForm(GuestBookType::class);\n        $form-&gt;handleRequest($request);\n\n        if ($form-&gt;isSubmitted()) {\n            $data = $form-&gt;getData();\n            $this-&gt;repository-&gt;add($data);\n            $this-&gt;repository-&gt;flush();\n            $this-&gt;addFlash('success', 'Erfolgreich gespeichert.');\n            return $this-&gt;redirectToRoute('index');\n        }\n\n        $limit = 2;\n        $maxPages = $this-&gt;getMaxPages($limit);\n        $currentPage = $this-&gt;getCurrentPage();\n\n        $entries = $this-&gt;repository-&gt;findBy([], ['createdAt' =&gt; 'DESC']);\n\n        return $this-&gt;render('index.html.twig', [\n            'form' =&gt; $form,\n            'entries' =&gt; $entries,\n            'maxPages' =&gt; $maxPages\n        ]);\n    }\n}\n</code></pre>"},{"location":"dangerous-outdated/basics-of-symfony/#services","title":"Services","text":"<p>In Symfony, services are a fundamental concept that plays a crucial role in the architecture of applications. They are essentially PHP objects that perform specific tasks and are managed by the Symfony Service Container. Services are typically defined in configuration files such as services.yaml. This file specifies the service ID, class name, and any constructor arguments needed for the service. A common usecase for services are custom parameters in class constructors or the usage of .env variables.</p> <pre><code>parameters:\n\nservices:\n  _defaults:\n    autowire: true\n    autoconfigure: true\n\n  App\\:\n    resource: \"../src/\"\n    exclude:\n      - \"../src/DependencyInjection/\"\n      - \"../src/Entity/\"\n      - \"../src/Kernel.php\"\n\n  # Hands the value of LIMIT in .env over to the first parameter of the constructor of IndexController\n  App\\Controller\\IndexController:\n    arguments:\n      - \"%env(resolve:LIMIT)%\"\n</code></pre>"},{"location":"dangerous-outdated/basics-of-symfony/#flash-messages","title":"Flash Messages","text":"<p>Flash messages in Symfony are a mechanism used to display temporary notifications to users, typically after a form submission or other actions that result in a page redirect. These messages are stored in the user's session and are automatically removed once they are read, ensuring they are only displayed once.</p> <pre><code>$this-&gt;addFlash('success', 'Erfolgreich gespeichert.');\n</code></pre> <pre><code>{% for label, messages in app.flashes %}\n    {% for message in messages %}\n        &lt;p&gt;{{ message }}&lt;/p&gt;\n    {% endfor %}\n{% endfor %}\n</code></pre>"},{"location":"dangerous-outdated/django-deployment-on-render/","title":"How to Deploy a Django App on Render","text":""},{"location":"dangerous-outdated/django-deployment-on-render/#pre-requirements","title":"Pre-Requirements","text":"<ul> <li>A Django app running in development mode</li> <li>Web service (at least starter plan) on Render</li> <li>Docker (Installation)</li> </ul>"},{"location":"dangerous-outdated/django-deployment-on-render/#deployment","title":"Deployment","text":""},{"location":"dangerous-outdated/django-deployment-on-render/#seperating-the-settings","title":"Seperating the Settings","text":"<p>You may have already split your settings into a base settings file that contains everything that stays consistent across development, test and production, and a test settings file for running the tests. We will use exactly the same principle to separate development and production settings.</p> <p>For example the <code>INSTALLED_APPS</code> should be the same in very state, but <code>DEBUG</code> is only enabled in Development Mode.</p> <p>After seperating the files, your <code>config</code> folder should look something like this:</p> <pre><code>config/\n    settings/\n        __init__.py\n        base.py\n        prod.py\n        dev.py\n    urls.py\n    wsgi.py\n    asgi.py\n</code></pre> <p>Important: You have to change <code>BASE_DIR = Path(__file__).resolve().parent.parent</code> in the <code>base.py</code> file to <code>BASE_DIR = Path(__file__).resolve().parent.parent.parent</code>.</p> <p>Now we will use the environment variables to decide if the app is running in production or in development mode. To do this, we have to change <code>config/asgi.py</code>, <code>config/wsgi.py</code> and <code>manage.py</code> by replacing <code>os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')</code> with <code>os.environ.setdefault('DJANGO_SETTINGS_MODULE', os.getenv(\"DJANGO_SETTINGS_MODULE\", \"config.settings.dev\"))</code>.</p> <p>Now we can choose between development and production mode by setting the environment variable <code>DJANGO_SETTINGS_MODULE</code>.</p> <p>Examples:</p> <ul> <li><code>DJANGO_SETTINGS_MODULE=unset</code>: Running in dev mode</li> <li><code>DJANGO_SETTINGS_MODULE=config.settings.prod</code>: Running in prod mode</li> </ul>"},{"location":"dangerous-outdated/django-deployment-on-render/#setting-environment-variables-with-dotenv","title":"Setting Environment Variables with Dotenv","text":"<p>Environment variables are important to keep important and sensitive data (database connections, passwords, etc.) secret. Before we can you dotenv we have to install the package <code>python-dotenv</code>. Replace all important data with environment variables.</p>"},{"location":"dangerous-outdated/django-deployment-on-render/#extending-the-settings","title":"Extending the Settings","text":"<p>Before we can deploy the app we need to make several changes to <code>base.py</code> and <code>prod.py</code>.</p> <p>base.py:</p> <ol> <li>Set <code>ALLOWED_HOSTS</code> to a list of addresses and domains through which the website should be accessible.</li> <li>Install whitenoise and set <code>STATICFILES_STORAGE</code> to <code>\"whitenoise.storage.CompressedManifestStaticFilesStorage\"</code>.</li> <li>Set <code>NPM_BIN_PATH</code> to <code>\"/usr/bin/npm\"</code>.</li> </ol> <p>prod.py:</p> <ol> <li>Set <code>DEBUG</code>to <code>False</code> (if not already done).</li> <li>Set <code>SECURE_HSTS_SECONDS</code> to <code>31536000</code>.</li> <li>Set <code>SESSION_COOKIE_SECURE</code>, <code>SECURE_HSTS_INCLUDE_SUBDOMAINS</code> and <code>SECURE_HSTS_PRELOAD</code> to <code>True</code>.</li> <li>Set <code>CSRF_TRUSTED_ORIGINS</code> to <code>[f\"https://{host}\" for host in ALLOWED_HOSTS]</code></li> </ol>"},{"location":"dangerous-outdated/django-deployment-on-render/#creating-the-dockerfile","title":"Creating the Dockerfile","text":"<p>In the last step we have to create a <code>Dockerfile</code> in the root folder and insert the following content:</p> <pre><code># Replace with the latest Python version\nFROM python:3.12\n\n# Set environment variables\nENV PYTHONUNBUFFERED=1 \\\n    PYTHONDONTWRITEBYTECODE=1 \\\n    DJANGO_SETTINGS_MODULE=config.settings.prod\n\n# Set the working directory\nWORKDIR /app\n\nRUN python --version\n\n# Install Node.js and npm\nRUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - &amp;&amp; \\\n    apt-get install -y nodejs\n\n# Install dependencies for MariaDB\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y python3-dev default-libmysqlclient-dev build-essential pkg-config\n\n# Install Poetry\nRUN pip install poetry\n\n# Copy pyproject.toml and poetry.lock\nCOPY pyproject.toml poetry.lock /app/\n\n# Configure Poetry to not use virtualenvs\nRUN poetry config virtualenvs.create false\n\n# Install Python dependencies\nRUN poetry install --no-dev --no-root\n\n# Copy the entire project\nCOPY . /app/\n\n# Install Tailwind CSS (requires Node.js and npm)\nRUN python manage.py tailwind install --no-input;\n\n# Build Tailwind CSS\nRUN python manage.py tailwind build --no-input;\n\n# Collect static files\nRUN python manage.py collectstatic --no-input;\n\n# Make migrations\nRUN python manage.py makemigrations --no-input;\n\n# Migrate the database\nRUN python manage.py migrate --no-input;\n\n# Expose port 8000\nEXPOSE 8000\n\n# Start the application with Gunicorn\nCMD [\"gunicorn\", \"--bind\", \"0.0.0.0:8000\", \"config.wsgi:application\"]\n</code></pre> <p>\ud83c\udf89 Happy Deployment! \ud83c\udf89</p>"},{"location":"frameworks/vue-nuxt/basics-of-nuxt/","title":"Basics of Nuxt","text":"<p>Based on the YouTube playlist \"Nuxt 3 Tutorial\" by Net Ninja.</p>"},{"location":"frameworks/vue-nuxt/basics-of-nuxt/#disclaimer","title":"Disclaimer","text":"<p>Like all of my cheatsheets, this one is not guaranteed to be correct. The official documentation for Nuxt can be found here. Please note also that the predecessor of this cheatsheet is \"Basics of Vue\".</p>"},{"location":"frameworks/vue-nuxt/basics-of-nuxt/#creating-a-nuxt-app","title":"Creating a Nuxt App","text":"<p>In this case we create our Nuxt project with Bun because it's Zig \ud83e\udd23!</p> <pre><code>bun x nuxi@latest init &lt;your-project-name&gt;\ncd &lt;project-name&gt;\nsudo npm install\nbun run dev\n</code></pre> <p>After installation, you should simply delete the <code>app.vue</code> file from the route directory as quickly as possible so that you have an empty Nuxt page.</p>"},{"location":"frameworks/vue-nuxt/basics-of-nuxt/#external-libraries","title":"External Libraries","text":"<p>Nuxt has a large eco-system of easy-installable modules like Tailwindcss or Pinia. You can find every module on the Nuxt modules page including documentation and installation instructions.</p>"},{"location":"frameworks/vue-nuxt/basics-of-nuxt/#pages-routing","title":"Pages &amp; Routing","text":"<p>Nuxt makes page creation and routing easy compared to Vue by doing it automatically. All you have to do is to create a <code>pages/</code> folder inside the root-directory of you project. The routing which causes of the folder structure is straight forward:</p> <pre><code>pages/\n    index.vue -&gt; example.com/\n    about.vue -&gt; example.com/about\n    products/\n        hello.vue -&gt; example.com/products/about\n</code></pre>"},{"location":"frameworks/vue-nuxt/basics-of-nuxt/#routing-with-params","title":"Routing with Params","text":"<p>Nuxt also makes it easy to use route parameters. All you need to do is create a file or a folder with the same name as the route parameter but enclosed in square brackets. You can access these parameters by using and destructuring <code>useRoute().params</code>.</p> <pre><code>pages/\n    products/\n        [id].vue -&gt; e.g. example.com/products/12\n</code></pre> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;p&gt;Product details for {{ id }}&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script lang=\"ts\" setup&gt;\nconst { id } = useRoute().params;\n&lt;/script&gt;\n\n&lt;style&gt;&lt;/style&gt;\n</code></pre>"},{"location":"frameworks/vue-nuxt/basics-of-nuxt/#linking-pages","title":"Linking Pages","text":"<p>Like Vue (<code>RouterLink</code>), Nuxt has its own tag for creating links that increases efficiency and stays true to the philosophy of single-page applications: the <code>NuxtLink</code> tag. Additionally, this tag adds HTML classes, such as <code>router-link-active</code> and <code>router-link-exact-active</code>, that can help you style your application.</p> <pre><code>&lt;NuxtLink to=\"/\"&gt;Nuxt Dojo&lt;/NuxtLink&gt;\n</code></pre>"},{"location":"frameworks/vue-nuxt/basics-of-nuxt/#layouts","title":"Layouts","text":"<p>Layouts define the basic template structure of a Nuxt application by wrapping the pages. For example, they can include headers and footers on every page, thus avoiding a lot of boilerplate code. To create the default layout, just create <code>layouts/default.vue</code> in the root directory.</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;header&gt;\n      &lt;nav&gt;\n        &lt;NuxtLink to=\"/\"&gt;Nuxt Dojo&lt;/NuxtLink&gt;\n        &lt;ul&gt;\n          &lt;li&gt;\n            &lt;NuxtLink to=\"/\"&gt;Home&lt;/NuxtLink&gt;\n            &lt;NuxtLink to=\"/about\"&gt;About&lt;/NuxtLink&gt;\n            &lt;NuxtLink to=\"/products\"&gt;Products&lt;/NuxtLink&gt;\n          &lt;/li&gt;\n        &lt;/ul&gt;\n      &lt;/nav&gt;\n    &lt;/header&gt;\n\n    &lt;div&gt;\n      &lt;!-- The slot tag is replaced by the actual content of the side --&gt;\n      &lt;slot /&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>"},{"location":"frameworks/vue-nuxt/basics-of-nuxt/#overriding-the-default-layout","title":"Overriding the Default Layout","text":"<p>Sometimes you want to override the default layout, and guess what: it's not hard \ud83d\ude42! You just need to create your new layout (e.g. \"products.vue\") in the \"layouts/\" folder and add this code on the page whose layout you want to override:</p> <pre><code>definePageMeta({\n  layout: \"products\",\n});\n</code></pre>"},{"location":"frameworks/vue-nuxt/basics-of-nuxt/#components","title":"Components","text":"<p>As in Vue, components can also be created in Nuxt, which have a big advantage or disadvantage depending on your perspective: they are imported automatically. This results in less boilerplate code if the components are in <code>components/</code>, but creates this boilerplate code if they are in a subfolder.</p>"},{"location":"frameworks/vue-nuxt/basics-of-nuxt/#errors","title":"Errors","text":""},{"location":"frameworks/vue-nuxt/basics-of-nuxt/#handling","title":"Handling","text":"<p>Error Handling in Nuxt is really straight forward. All we have to do is to create a <code>error.vue</code> component in the root directory.</p> <pre><code>&lt;template&gt;\n  &lt;div class=\"mt-7 max-w-sm mx-auto text-center card\"&gt;\n    &lt;p class=\"mt-7 text-7xl font-bold\"&gt;{{ error.statusCode }}&lt;/p&gt;\n    &lt;p class=\"mt-7 text-6xl\"&gt;Ooops.&lt;/p&gt;\n    &lt;p class=\"mt-7\"&gt;{{ error.message }}&lt;/p&gt;\n    &lt;button class=\"btn my-7\" @click=\"handleError\"&gt;Go Home...&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\n// Accepts the error from Nuxt\ndefineProps({\n  error: Object,\n});\n\n// Clearing the error\nconst handleError = () =&gt; clearError({ redirect: \"/\" });\n&lt;/script&gt;\n</code></pre>"},{"location":"frameworks/vue-nuxt/basics-of-nuxt/#throwing","title":"Throwing","text":"<p>Throwing error is obviously easier than handling them.</p> <pre><code>throw createError({\n  statusCode: 404,\n  statusMessage: \"Product not found\",\n  fatal: true,\n});\n</code></pre>"},{"location":"frameworks/vue-nuxt/basics-of-nuxt/#server-routes","title":"Server Routes","text":"<p>Nuxt Server Routes let you handle backend tasks directly within Nuxt.js, such as data processing, creating API endpoints, simple server-side authentication, and database interactions. They\u2019re great for small to medium projects where a full backend like Django isn\u2019t needed. However, for larger, more complex applications, a dedicated backend framework like Django is more scalable and robust. In this case they are still often used as proxies to avoid exposing sensible data to the frontend.</p> <p>Server routes are created in the <code>server/api/</code> folder. Every endpoint is a seperate TypeScript file. You can access the server with e.g. <code>useFetch('/api/yourendpoint')</code>.</p>"},{"location":"frameworks/vue-nuxt/basics-of-nuxt/#get-requets","title":"GET-Requets","text":"<pre><code>export default defineEventHandler((event) =&gt; {\n  // Get query params\n  const { name } = useQuery(event);\n\n  return {\n    message: `Hello, ${name}!`,\n  };\n});\n</code></pre>"},{"location":"frameworks/vue-nuxt/basics-of-nuxt/#post-requests","title":"POST-Requests","text":"<pre><code>// Post requests must be asynchronous to access the body.\nexport default defineEventHandler(async (event) =&gt; {\n  const { name } = useQuery(event);\n\n  // Get body\n  const { age } = await useBody(event);\n\n  return {\n    message: `Hello, ${name}! You are ${age} years old.`,\n  };\n});\n</code></pre>"},{"location":"frameworks/vue-nuxt/basics-of-nuxt/#dynamic-routes","title":"Dynamic Routes","text":"<p>Like in the frontend you can also use dynamic routes, by naming your TypeScript in square brackets. These routes are then accessible in the endpoint:</p> <pre><code>// server/api/[code].ts\nconst { code } = event.context.params;\n</code></pre>"},{"location":"frameworks/vue-nuxt/basics-of-nuxt/#environment-variables","title":"Environment Variables","text":"<p>Server routes also allow us to use environment variables using <code>.env</code> files. Before we can use environment variables we have to define them in the <code>nuxt.config.ts</code> file.</p> <pre><code>// https://nuxt.com/docs/api/configuration/nuxt-config\nexport default defineNuxtConfig({\n  runtimeConfig: {\n    variable: process.env.VARIABLE,\n  },\n});\n</code></pre> <p>After this we can use them in the backend.</p> <pre><code>const { variable } = useRuntimeConfig();\n</code></pre> <p>Please note that you should use <code>$fetch</code> in the Nuxt \"backend\" instead of <code>useFetch</code> if you want to communicate with the real backend.</p>"},{"location":"frameworks/vue-nuxt/basics-of-nuxt/#showing-off-knowledge","title":"Showing Off Knowledge","text":""},{"location":"frameworks/vue-nuxt/basics-of-nuxt/#editing-the-head","title":"Editing the Head","text":"<p>You can gloabally edit the HTML-head by editing the <code>nuxt.config.ts</code> file.</p> <pre><code>// https://nuxt.com/docs/api/configuration/nuxt-config\nexport default defineNuxtConfig({\n  app: {\n    head: {\n      title: \"Nuxt Dojo\",\n      meta: [{ name: \"description\", content: \"Everything about Nuxt 3\" }],\n      link: [\n        {\n          rel: \"stylesheet\",\n          href: \"https://fonts.googleapis.com/icon?family=Material+Icons\",\n        },\n      ],\n    },\n  },\n});\n</code></pre> <p>Or use <code>useHead</code> if you just want to change the head on a single page.</p> <pre><code>useHead({\n  title: \"Nuxt Dojo | Merch\",\n});\n</code></pre> <p>If you are a really cool frontend developer and want to stay with components use the build-in components, like <code>Head</code> or <code>Title</code>.</p>"},{"location":"frameworks/vue-nuxt/basics-of-vue/","title":"Basics of Vue.js","text":"<p>Based on the YouTube video \"Vue.js Crash Course 2024\" by Traversy Media.</p>"},{"location":"frameworks/vue-nuxt/basics-of-vue/#disclaimer","title":"Disclaimer","text":"<p>Like all of my cheatsheets, this one is not guaranteed to be correct. The official documentation for Vue can be found here.</p>"},{"location":"frameworks/vue-nuxt/basics-of-vue/#creating-a-vue-app","title":"Creating a Vue App","text":"<p>To create a new Vue app with <code>npm</code>, use the following commands:</p> <pre><code>npm create vue@latest &lt;project-name&gt;\ncd &lt;project-name&gt;\nsudo npm install\nnpm run dev\n</code></pre>"},{"location":"frameworks/vue-nuxt/basics-of-vue/#the-vue-component","title":"The Vue Component","text":"<p>Almost everything in Vue is a component. Any Vue component of three parts:</p> <ul> <li><code>&lt;script&gt;</code>: Contains the logic of the component (data and methods)</li> <li><code>&lt;template&gt;</code>: Defines the HTML markup of the component</li> <li><code>&lt;style&gt;</code>: Contains component-specific CSS styles</li> </ul> <pre><code>&lt;script setup&gt;&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;h1&gt;{{ foo }}&lt;/h1&gt;\n&lt;/template&gt;\n\n&lt;style scoped&gt;\nh1 {\n  color: #42b983;\n}\n&lt;/style&gt;\n</code></pre> <p></p> <p>A component can also wrap around other components using the <code>slot</code> tag.</p> <pre><code>&lt;script setup&gt;\ndefineProps({\n  background: {\n    type: String,\n    default: \"bg-gray-100\",\n  },\n});\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div v-bind:class=\"`${background} p-6 rounded-lg shadow-md`\"&gt;\n    &lt;slot /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>"},{"location":"frameworks/vue-nuxt/basics-of-vue/#directives","title":"Directives","text":"<p>Vue provides many powerful directives for dynamic template manipulation. Here we cover only the most important ones. You can find a full list of them in the Vue documentation. These optimized directives significantly improve the readability and efficiency of a Vue component.</p>"},{"location":"frameworks/vue-nuxt/basics-of-vue/#conditionals","title":"Conditionals","text":"<p>You can implement conditional logic into components by using <code>v-if</code>, <code>v-else</code> and <code>v-else-if</code>.</p> <pre><code>&lt;p v-if=\"status === 'active'\"&gt;Request Active&lt;/p&gt;\n&lt;p v-else-if=\"status === 'pending'\"&gt;Request Pending&lt;/p&gt;\n&lt;p v-else=\"status === 'active'\"&gt;Request Failed&lt;/p&gt;\n</code></pre>"},{"location":"frameworks/vue-nuxt/basics-of-vue/#binding-expressions","title":"Binding Expressions","text":"<p>Dynamically bind one or more attributes, or a component prop to an expression.</p> <pre><code>&lt;img v-bind:src=\"imageSrc\" /&gt;\n\n&lt;!-- Shorthand --&gt;\n&lt;img :src=\"imageSrc\" /&gt;\n</code></pre>"},{"location":"frameworks/vue-nuxt/basics-of-vue/#loops","title":"Loops","text":"<p>Vue supports looping over elements using <code>v-for</code>.</p> <pre><code>&lt;ul&gt;\n  &lt;li v-for=\"task in tasks\" :key=\"task\"&gt;\n    {{ task }}\n  &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>"},{"location":"frameworks/vue-nuxt/basics-of-vue/#events","title":"Events","text":"<p>Vue makes adding events to a component really easy, by using the <code>@</code> symbol.</p> <pre><code>&lt;button @:click=\"status = !status\"&gt;Toggle&lt;/button&gt;\n</code></pre>"},{"location":"frameworks/vue-nuxt/basics-of-vue/#forms","title":"Forms","text":"<p>Efficient form handling in Vue is possible by using the <code>v-model</code> directive which creates a two-way data binding between a value in our template and a value in our data properties.</p> <pre><code>&lt;script setup&gt;\nimport { ref } from \"vue\";\n\nconst tasks = ref([\"Task One\", \"Task Two\", \"Task Three\", \"Task Four\"]);\nconst newTask = ref(\"\");\n\nconst addTask = () =&gt; {\n  if (newTask.value.trim() !== \"\") {\n    tasks.value.push(newTask.value);\n    newTask.value = \"\";\n  }\n};\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;form @submit.prevent=\"addTask\"&gt;\n    &lt;label for=\"newTask\"&gt;Add task&lt;/label&gt;\n    &lt;input type=\"text\" id=\"newTask\" name=\"newTask\" v-model=\"newTask\" /&gt;\n    &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n  &lt;/form&gt;\n\n  &lt;h3&gt;Tasks:&lt;/h3&gt;\n  &lt;ul&gt;\n    &lt;li v-for=\"task in tasks\" :key=\"task\"&gt;\n      {{ task }}\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/template&gt;\n</code></pre>"},{"location":"frameworks/vue-nuxt/basics-of-vue/#reactivity","title":"Reactivity","text":"<p>Reactivity enables automatic UI updates when data changes.</p> <ul> <li><code>reactive/</code>: For complex, nested objects.</li> <li><code>ref/</code>: For primitive values \u200b\u200band simple objects/arrays.</li> </ul> <pre><code>import { ref, reactive } from \"vue\";\n\nconst count = ref(0);\nconst state = reactive({ count: 0 });\n</code></pre>"},{"location":"frameworks/vue-nuxt/basics-of-vue/#lifecycle-hooks","title":"Lifecycle Hooks","text":"<p>Vue automatically executes lifecycle hooks on various events. You can find a list of these lifecycle hooks in the documentation.</p> <pre><code>import { onMounted } from \"vue\";\n\nonMounted(() =&gt; {\n  // Do something\n});\n</code></pre>"},{"location":"frameworks/vue-nuxt/basics-of-vue/#props","title":"Props","text":"<p>Vue Props allow you to pass data from a parent component to a child component.</p> <pre><code>&lt;!-- Child component --&gt;\n&lt;script setup&gt;\nimport { defineProps } from \"vue\";\n\ndefineProps({\n  title: {\n    type: String,\n    default: \"Become a Vue Dev\",\n  },\n});\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;h1&gt;\n    {{ title }}\n  &lt;/h1&gt;\n&lt;/template&gt;\n</code></pre> <pre><code>&lt;!-- Parent component --&gt;\n&lt;script setup&gt;\nimport Hero from \"@/components/Hero.vue\";\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;Navbar /&gt;\n  &lt;Hero title=\"Test\" /&gt;\n&lt;/template&gt;\n</code></pre>"},{"location":"frameworks/vue-nuxt/basics-of-vue/#efficient-computing","title":"Efficient Computing","text":"<p>Because of the single-page functionality, it would not be a good idea to perform calculations every time something changes. The <code>computed</code> function ensures that expressions are only updated when one of their dependencies changes.</p> <pre><code>&lt;template&gt;\n  &lt;p&gt;Original Wert: {{ number }}&lt;/p&gt;\n  &lt;p&gt;Verdoppelter Wert: {{ doubledNumber }}&lt;/p&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { ref, computed } from \"vue\";\n\nconst number = ref(5);\nconst doubledNumber = computed(() =&gt; number.value * 2);\n&lt;/script&gt;\n</code></pre>"},{"location":"frameworks/vue-nuxt/basics-of-vue/#router","title":"Router","text":"<p>The router in Vue.js allows navigating between different views or pages within a single-page application (SPA). The <code>vue-router</code> library is used to configure and manage these routes.</p>"},{"location":"frameworks/vue-nuxt/basics-of-vue/#installation-setup","title":"Installation &amp; Setup","text":"<pre><code>npm install vue-router\n</code></pre> <pre><code>// router/index.js\nimport { createRouter, createWebHistory } from \"vue-router\";\nimport HomeView from \"@/views/Home.vue\";\nimport JobsView from \"@/views/Jobs.vue\";\nimport NotFoundView from \"@/views/NotFound.vue\";\n\n// Here we define all our routes\nconst routes = [\n  {\n    path: \"/\",\n    name: \"Home\",\n    component: HomeView,\n  },\n  {\n    path: \"/jobs\",\n    name: \"Jobs\",\n    component: JobsView,\n  },\n\n  // This defines a 404 view\n  {\n    path: \"/:catchAll(.*)*\",\n    name: \"NotFound\",\n    component: NotFoundView,\n  },\n];\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes,\n});\n\nexport default router;\n</code></pre> <pre><code>// main.js\nimport { createApp } from \"vue\";\nimport App from \"./App.vue\";\nimport router from \"./router\";\n\nconst app = createApp(App);\napp.use(router);\napp.mount(\"#app\");\n</code></pre> <pre><code>&lt;script setup&gt;\nimport { RouterView } from 'vue-router';\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;RouterView /&gt;\n&lt;/template&gt;\n</code></pre>"},{"location":"frameworks/vue-nuxt/basics-of-vue/#route-params","title":"Route Params","text":"<p>To create a route with route params, you can use this syntax in the path: <code>/jobs/:id</code>. It's also possible to access these parameters in the template.</p> <pre><code>import { useRoute } from \"vue-router\";\n\nconst route = useRoute();\nconst jobId = route.params.id;\n</code></pre>"},{"location":"frameworks/vue-nuxt/basics-of-vue/#router-links","title":"Router Links","text":"<p>Like the anchor tag (<code>a</code>), router links offer navigation between pages. However, they do not expect an <code>href</code> but rather a <code>to</code> attribute, which points to the view.</p> <pre><code>&lt;RouterLink to=\"/jobs\"&gt;Jobs&lt;/RouterLink&gt;\n</code></pre>"},{"location":"frameworks/vue-nuxt/basics-of-vue/#pushing-users","title":"Pushing Users","text":"<p>It is possible to push users from one route to another.</p> <pre><code>import router from \"@/router\";\n\nrouter.push(`/jobs/${response.data.id}`);\n</code></pre>"},{"location":"frameworks/vue-nuxt/basics-of-vue/#showing-off-knowledge","title":"Showing Off Knowledge","text":""},{"location":"frameworks/vue-nuxt/basics-of-vue/#proxying","title":"Proxying","text":"<p>To avoid hardcoding the backend ip-address you can use proxies. Proxies are defined in <code>vite.config.js</code>.</p> <pre><code>import { fileURLToPath, URL } from \"node:url\";\n\nimport { defineConfig } from \"vite\";\nimport vue from \"@vitejs/plugin-vue\";\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [vue()],\n  server: {\n    port: 3000,\n    proxy: {\n      // /api is now a proxy to our backend.\n      \"/api\": {\n        target: \"http://localhost:5000\",\n        changeOrigin: true,\n        rewrite: (path) =&gt; path.replace(/^\\/api/, \"\"),\n      },\n    },\n  },\n  resolve: {\n    alias: {\n      \"@\": fileURLToPath(new URL(\"./src\", import.meta.url)),\n    },\n  },\n});\n</code></pre>"},{"location":"frameworks/vue-nuxt/basics-of-vue/#spinner","title":"Spinner","text":"<p>Spinners are animated loading indicators used in Vue.js applications to provide visual feedback to the user while content is loading. There are several different types of Vue Spinners including top, ring, dot and bar spinners, all of which can be easily integrated into an application using Vue components or third-party libraries such as \"vue-spinner\" by including and configuring them in the template syntax.</p> <pre><code>npm install vue-spinner\n</code></pre> <pre><code>&lt;script setup&gt;\nimport PulseLoader from \"vue-spinner/src/PulseLoader.vue\";\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;PulseLoader /&gt;\n&lt;/template&gt;\n</code></pre>"},{"location":"frameworks/vue-nuxt/basics-of-vue/#toasts","title":"Toasts","text":"<p>Toasts are short, temporary notifications or messages that usually appear at the bottom of the screen and automatically disappear after a short time.</p> <pre><code>npm install vue-toastification@next\n</code></pre> <pre><code>import { useToast } from \"vue-toastification\";\n\nconst toast = useToast();\n\ntoast.success(\"Job edited successfully\");\n</code></pre>"},{"location":"machine-learning-kurz-und-gut/2_1-linear-regression/","title":"2.1 Linear Regression","text":"<p>The first part of the second chapter of the book deals with linear regression with its two versions, Ordinary Least Square and Stochastic Gradient Descent. It also covers the associated loss function.</p>"},{"location":"machine-learning-kurz-und-gut/2_1-linear-regression/#loss-function","title":"Loss Function","text":"<p>In statistics and machine learning, a loss function quantifies the losses generated by the errors that we commit when:</p> <ul> <li>we estimate the parameters of a statistical model;</li> <li>we use a predictive model, such as a linear regression, to predict a variable.</li> </ul> <p>The minimization of the expected loss, called statistical risk, is one of the guiding principles in statistical modelling.</p> <p>Source: https://www.statlect.com/glossary/loss-function</p> <p>The MSE is a way to measure how well a linear regression model fits the data. It does this by calculating the average of the squares of the differences between the actual values and the predicted values.</p>"},{"location":"machine-learning-kurz-und-gut/2_1-linear-regression/#example-mean-square-error-mse-for-linear-regression","title":"Example: Mean Square Error (MSE) for Linear Regression","text":"\\[ \\text{MSE} = \\frac{1}{n} \\sum\\_{i=1}^{n} (y_i - \\hat{y}\\_i)^2 \\] <p>The Mean Squared Error (MSE) measures how well a linear regression model fits the data by following these steps:</p> <ol> <li> <p>Calculate Errors: For each data point, find the difference between the actual value and the predicted value. This is the error.</p> </li> <li> <p>Square the Errors: Square these errors to make them positive and to give more weight to larger errors.</p> </li> <li> <p>Average: Take the average of these squared errors. This average is the MSE, representing how well the model's predictions match the actual values. The lower the MSE, the better the model fits the data.</p> </li> </ol> <p>Here\u2019s how you can write about Ordinary Least Squares (OLS) using <code>scikit-learn</code>, including its usage and some common use cases:</p>"},{"location":"machine-learning-kurz-und-gut/2_1-linear-regression/#ordinary-least-squares-ols","title":"Ordinary Least Squares (OLS)","text":"<p>Ordinary Least Squares (OLS) is a method used in linear regression to estimate the coefficients of the linear model. It minimizes the sum of the squared differences between the observed values and the values predicted by the linear model. This results in the \"best fit\" line through the data points.</p>"},{"location":"machine-learning-kurz-und-gut/2_1-linear-regression/#usage","title":"Usage","text":"<p>To implement OLS in Python using <code>scikit-learn</code>, you can use the <code>LinearRegression</code> class:</p> <pre><code>from sklearn.linear_model import LinearRegression\n\n# Example data\nX = [[1], [2], [3], [4], [5]]  # Features (e.g., years of experience)\ny = [1, 2, 3, 4, 5]            # Target values (e.g., salary)\n\n# Initialize the model\nmodel = LinearRegression()\n\n# Fit the model\nmodel.fit(X, y)\n\n# Predict using the model\npredictions = model.predict([[6], [7]])\n\nprint(\"Predicted values:\", predictions)\n</code></pre>"},{"location":"machine-learning-kurz-und-gut/2_1-linear-regression/#use-cases","title":"Use Cases","text":"<ul> <li> <p>Predicting Housing Prices: OLS can be used to predict house prices based on features like square footage, number of bedrooms, and location.</p> </li> <li> <p>Salary Estimation: Estimating salaries based on years of experience, education level, and job position.</p> </li> <li> <p>Sales Forecasting: Predicting future sales based on past sales data, marketing spend, and economic indicators.</p> </li> <li> <p>Risk Assessment: Estimating the risk of default on loans based on borrower characteristics like credit score and income.</p> </li> <li> <p>Medical Research: Analyzing the relationship between drug dosage and patient recovery time.</p> </li> </ul> <p>In all these cases, OLS helps find the linear relationship between the independent variables (features) and the dependent variable (target), allowing for accurate predictions and insights.</p>"},{"location":"machine-learning-kurz-und-gut/2_1-linear-regression/#stochastic-gradient-descent-sgd","title":"Stochastic Gradient Descent (SGD)","text":"<p>Stochastic Gradient Descent (SGD) is an optimization method used to minimize the loss function in machine learning models, particularly in linear regression and classification tasks. Unlike batch gradient descent, which uses the entire dataset to compute the gradient, SGD updates the model's parameters using one or a few training examples at a time. This makes it faster and more efficient for large datasets.</p>"},{"location":"machine-learning-kurz-und-gut/2_1-linear-regression/#usage_1","title":"Usage","text":"<p>To implement SGD in Python using <code>scikit-learn</code>, you can use the <code>SGDRegressor</code> or <code>SGDClassifier</code> class, depending on your task. Here\u2019s an example using <code>SGDRegressor</code> for a linear regression task:</p> <pre><code>from sklearn.linear_model import SGDRegressor\n\n# Example data\nX = [[1], [2], [3], [4], [5]]  # Features (e.g., years of experience)\ny = [1, 2, 3, 4, 5]            # Target values (e.g., salary)\n\n# Initialize the model with SGD\nmodel = SGDRegressor(max_iter=1000, tol=1e-3)\n\n# Fit the model\nmodel.fit(X, y)\n\n# Predict using the model\npredictions = model.predict([[6], [7]])\n\nprint(\"Predicted values:\", predictions)\n</code></pre>"},{"location":"machine-learning-kurz-und-gut/2_1-linear-regression/#use-cases_1","title":"Use Cases","text":"<ul> <li> <p>Real-Time Prediction: Due to its efficiency, SGD is commonly used in online learning settings where the model needs to be updated continuously as new data arrives.</p> </li> <li> <p>Large-Scale Machine Learning: SGD is ideal for training models on very large datasets because it processes one sample at a time, making it memory efficient.</p> </li> <li> <p>Text Classification: For tasks like spam detection or sentiment analysis, SGD can be used with models like logistic regression to classify large volumes of text data.</p> </li> <li> <p>Recommendation Systems: SGD is used in collaborative filtering algorithms to predict user preferences based on past behavior.</p> </li> <li> <p>Deep Learning: Although more advanced variants like Adam are often used, SGD remains a foundational optimization technique in training neural networks.</p> </li> </ul> <p>In these scenarios, SGD helps models converge faster, especially when dealing with large datasets or when quick updates are needed during the training process.</p>"},{"location":"machine-learning-kurz-und-gut/overview/","title":"Machine Learning - kurz &amp; gut","text":"<p>\"Machine Learning - kurz &amp; gut\" is a small book (287 pages) that tries to explain difficult machine learning topics as simply as possible. It was written by Oliver Zeigermann and Chi Nhan Nguyen. I recently bought the book in a bookstore and am writing a cheat sheet for each chapter to draw a conclusion and remember it better. You can buy the book here. You may be wondering why these cheat sheets start with Chapter 2: the reason is simply that the first chapter wasn't difficult enough.</p> <p>Official Github Repository (with code examples): https://github.com/DJCordhose/buch-machine-learning-notebooks</p>"}]}